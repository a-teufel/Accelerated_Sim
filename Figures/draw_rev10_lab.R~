library(ggplot2)
library(cowplot)
library(gam)
require(mgcv)

#color scale to match ggplots default
ggplotColours <- function(n = 6, h = c(0, 360) + 15){
  if ((diff(h) %% 360) < 1) h[2] <- h[2] - 360/n
  hcl(h = (seq(h[1], h[2], length = n)), c = 100, l = 65)
}
MH.files<-list.files(pattern="rev_15_score_rep*")
print(MH.files)

by_15<-NULL

for( i in 1:length(MH.files)){
print(MH.files[i])

MH<-read.csv(file=MH.files[i],head=TRUE,sep=",")
prob<-MH$Prob
mat<-matrix(prob,nrow=15)
print(head(mat))


by_15<-cbind(by_15,mat)

}

by_15<-by_15 / t(replicate(nrow(by_15), colSums(by_15)))

print(by_15)
print(is.na(by_15))

mh_r_m<-rowMeans(by_15,na.rm = TRUE)
print(mh_r_m)

WF.files<-list.files(pattern="rev_15_score_fix_rep*")


by_15_wf<-NULL

for( i in 1:length(WF.files)){
print(WF.files[i])

WF<-read.csv(file=WF.files[i],head=TRUE,sep=",")
prob<-WF$Prob
mat<-matrix(prob,nrow=15)
print(head(mat))


by_15_wf<-cbind(by_15_wf,mat)

}

by_15_wf<-by_15_wf / t(replicate(nrow(by_15_wf), colSums(by_15_wf)))

print(by_15_wf)
wf_r_m<-rowMeans(by_15_wf)

print(wf_r_m)
print(mh_r_m)


dat<-data.frame(revert=1:15,mh=as.vector(as.numeric(by_15)),wf=as.vector(as.numeric(by_15_wf)),wf_mean=as.vector(as.numeric(wf_r_m)),mh_mean=as.vector(as.numeric(mh_r_m)))



ggcols=ggplotColours(n = 2)

cbbPalette <- c(ggcols[1],ggcols[2])

cols <- c("Accelerated\nSampling"=cbbPalette[1],"Original\nSampling"=cbbPalette[2])

print(mean(dat$mh))
lp<-ggplot(data=dat, aes(x=revert, y=mh))
lp<-lp+geom_point(aes(x=revert,y=wf_mean,colour="Original\nSampling"),dat)
lp<-lp+geom_point(aes(x=revert,y=mh_mean,colour="Accelerated\nSampling"),dat)
lp<-lp+geom_smooth(aes(x=revert,y=mh,colour="Accelerated\nSampling"),dat,fill=cbbPalette[1],method=gam,formula=y~I(log(x))) 
lp<-lp+geom_smooth(aes(x=revert,y=wf,colour="Original\nSampling"),dat,fill=cbbPalette[2],method=gam,formula=y~I(log(x))) 
lp<-lp+labs(x="Markov Step",y="Normalized Probability of Accepting Reversion")
lp<-lp+ guides(color=guide_legend(override.aes=list(fill=NA)))
lp<-lp+scale_x_continuous(breaks=seq(1,15))+theme(legend.key.size = unit(2, 'lines'), legend.key = element_rect(fill = "transparent", colour = "transparent"))+scale_colour_manual(name="",values=cols) +theme(legend.justification = c(1, 1), legend.position = c(1, 1))
pdf("stokes.pdf", onefile=FALSE)
lp
dev.off()
fdafd

lm_eqn <- function(df){

    eq <- substitute(~R~"="~r2, 
         list(
             r2 = format(cor(df$x,df$y), digits = 2)))
   
    as.character(as.expression(eq));                 
}

wf_sites<-NULL

mh_sites<-NULL

WF.files<-list.files(pattern="fix_rep*")
MH.files<-list.files(pattern="mh_rep*")

for( i in 1:3){
print(WF.files[i])
print(MH.files[i])
WF<-read.csv(file=WF.files[i],head=TRUE,sep=",")
MH<-read.csv(file=MH.files[i],head=TRUE,sep=",")


sites<-WF$Variant
s<-gsub("[^0-9]", "", sites) 
wf_sites<-c(wf_sites,s)


sitesmh<-MH$Variant
smh<-gsub("[^0-9]", "", sitesmh) 
mh_sites<-c(mh_sites,smh)

}

print(head(wf_sites))
print(head(mh_sites))

sit<-as.vector(as.numeric(wf_sites))
sit2<-as.vector(as.numeric(mh_sites))

print(head(sit))
print(head(sit2))

sit<-factor(sit,levels=c(1:300))
sit2<-factor(sit2,levels=c(1:300))

d<-tabulate(as.numeric(sit))
d2<-tabulate(as.numeric(sit2))

print(d)
print(d2)


temp<-data.frame(WF=as.vector(as.numeric(d)),MH=as.vector(as.numeric(d2)))

print(temp)


lm_eqn <- function(df){

    eq <- substitute(~R~"="~r2, 
         list(
             r2 = format(cor(sort(df$MH),sort(df$WF)), digits = 2)))
   
    as.character(as.expression(eq));                 
}



g<- ggplot(data=temp, aes(x=sort(MH),y=sort(WF))) + geom_point()+geom_abline(colour = "red", size = 1)+xlim(1,20)+ylim(1,20)
g<-g+xlab("# of Subsitutions with Accelerated Sampling")+ylab("# of Subsitutions with Original Sampling")
g<-g + geom_text(x = 12, y = 18, label = lm_eqn(temp), parse = TRUE,size=8)



pdf("QQ.pdf", onefile=FALSE)
g
dev.off()


temp<-data.frame(WF=sort(as.vector(as.numeric(d))),MH=sort(as.vector(as.numeric(d2))))
print(temp)

